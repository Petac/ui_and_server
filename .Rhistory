print(j)
mdl<-glm(mtc$mpg~mtc$am,data=mtc,family = "binomial")
summary(mdl)
g<-ggplot(mtc4g,aes(mpg, as.factor(am)))+geom_point()+ggtitle("automatic vs manual 4 gear")
print(g)
h<-ggplot(mtcothergear,aes(mpg,as.factor(am)))+geom_point()+ggtitle("automatic 3 vs manual 5 gear")
print(h)
i<-ggplot(mtc,aes(mpg,as.factor(am)))+geom_point()+ggtitle("All included")
print(i)
j<-ggplot(mtc,aes(mpg,as.factor(am),color=gear))+geom_point()+ggtitle("All included")
print(j)
?glm
e1<-resid(mdl)
g<-g+abline(mdl4g)
g<-ggplot(mtc4g,aes(mpg, as.factor(am)))+geom_point()+ggtitle("automatic vs manual 4 gear")
g<-g+abline(mdl4g)
g<-ggplot(mtc4g,aes(mpg, as.factor(am)))+geom_point()+ggtitle("automatic vs manual 4 gear")
g<-g+abline(mdl4g)
g<-ggplot(mtc4g,aes(mpg, as.factor(am)))+geom_point()+ggtitle("automatic vs manual 4 gear")
g<-g+geom_abline(mdl4g)
g<-g+geom_abline(aes(mdl4g))
print(g)
g<-g+geom_smooth(method = "glm")
print(g)
g<-g+geom_abline(intercept = exp(mdl4g$coefficients[1]),slope = exp(mdl4g$coefficients[2]))
print(g)
g<-ggplot(mtc4g,aes(mpg, as.factor(am)))+geom_point()+ggtitle("automatic vs manual 4 gear")
print(g)
g<-g+geom_abline(intercept = exp(mdl4g$coefficients[1]),slope = exp(mdl4g$coefficients[2]))
print(g)
mdl4g$coef[2]
mdl4g$coef[1]
exp(mdl4$coef[1])
exp(mdl4g$coef[1])
g<-g+geom_abline(intercept = exp(mdl4g$coef[1]),slope = exp(mdl4g$coef[2]))
print(g)
install.packages("GGally")
install.packages("car")
?step
step(lm.D9)
summary(lm1<-lm(Fertility~.,data=swiss))
slm1<-step(lm1)
summary(slm1)
slm1$anova
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
inTrain<-createDataPartition(y=segmentationOriginal$Case,p=0.7,list=FALSE)
training<-segmentationOriginal[inTrain,]
testing<-segmentationOriginal[-inTrain,]
set.seed(125)
cart<-train(Case~.,data=training,method="CART")
?train
cart<-train(Case~.,data=training,method="rpart")
set.seed(125)
cart<-train(Case~.,data=training,method="rpart")
print(cart$finalModel)
?predict
predict(cart,TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
predict(cart,TotalIntench2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
View(training)
colnames(testing)
predict(cart,TotalIntenCh2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
library(rattle)
install.package("rattle")
install.packages("rattle")
library(rattle)
fancyRpartPlot(cart$finalModel)
fancyRpartPlot(cart$finalModel)
Newdata<-data.frame(TotalIntenCh2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2)
Newdata<-data.frame(TotalIntenCh2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
View(Newdata)
View(Newdata)
Newdata<-select(-2)
library(plyr)
library(dplyr)
Newdata<-select(Newdata,-2)
Newdata
View(segmentationOriginal)
predict(cart,newdata=Newdata)
data1<-data.frame(TotalIntenCh2 = 23,000, FiberWidthCh1 = 10, PerimStatusCh1=2)
View(data1)
data1<-data.frame(TotalIntenCh2 = c(23, 50,57,), FiberWidthCh1 = c(10,10,8,8), PerimStatusCh1=c(2,,2),VarIntenCh4 =c(,100,100,100)
)
data1<-data.frame(TotalIntenCh2 = c(23, 50,57,NA), FiberWidthCh1 = c(10,10,8,8), PerimStatusCh1=c(2,NA,NA,2),VarIntenCh4 =c(NA,100,100,100)
)
View(data1)
predict(cart,newdata=data1)
training<-subset(segmentationOriginal,segmentationOriginal$Case=="Train")
View(training)
set.seed(125)
cart<-train(Class~.,data=training,method="rpart")
predict(cart,newdata=data1)
print(cart$finalModel)
fancyRpartPlot(cart$finalModel)
View(data1)
View(testing)
colnames(segmentationOriginal)
p<-colnames(segmentationOriginal)
data2<-data.frame(p)
View(data2)
data2<-data.frame(colnames(p))
View(data2)
data.frame
?data.frame
testing<-subset(segmentationOriginal,segmentationOriginal$Case=="Test")
testing <- testing[c(), ]
View(testing)
testing<-rbind(TotalIntenCh2 = c(23, 50,57,NA), FiberWidthCh1 = c(10,10,8,8), PerimStatusCh1=c(2,NA,NA,2),VarIntenCh4 =c(NA,100,100,100)
)
View(testing)
testing<-subset(segmentationOriginal,segmentationOriginal$Case=="Test")
testing <- testing[c(), ]
testing$TotalIntenCh2<-c(23, 50,57,NA)
dim(testing)<-(4,119)
dim(testing)<-c(4,119)
dim(testing)
?dim
testing<-subset(segmentationOriginal,segmentationOriginal$Case=="Test")
testing <- testing[c(1:4), ]
testing<-NULL
testing
testing<-subset(segmentationOriginal,segmentationOriginal$Case=="Test")
testing <- testing[c(1:4), ]
View(testing)
?rm
?empty
empty(testing)
testing[testing]<-NA
testing[!testing==0]<-NA
View(testing)
testing[testing==0]<-NA
testing$TotalIntenCh2<-c(23, 50,57,NA)
testing$FiberWidthCh1<-c(10,10,8,8)
testing$PerimStatusCh1<-c(2,NA,NA,2)
testing$VarIntenCh4<-c(NA,100,100,100)
View(testing)
colnames(tesing)
colnames(testing)
testing
predict(cart,newdata=testing)
ls<-predict(cart,newdata=testing)
summary(ls)
testing[testing==NA]<-NULL
testing
ls<-predict(cart,newdata=testing,na.rm=TRUE)
ls
summary(ls)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(plyr)
library(dplyr)
testing<-subset(segmentationOriginal,segmentationOriginal$Case=="Test")
cart<-train(Class~.,data=training,method="rpart")
set.seed(125)
cart<-train(Class~.,data=training,method="rpart")
training<-subset(segmentationOriginal,segmentationOriginal$Case=="Train")
set.seed(125)
cart<-train(Class~.,data=training,method="rpart")
library(rattle)
fancyRpartPlot(cart$finalModel)
?fancyRpartPlot
fancyRpartPlot(cart)
cart<-rpart(Class~.,data=training)
fancyRpartPlot(cart$finalModel)
summary(cart)
fancyRpartPlot(cart$finalModel)
fancyRpartPlot(cart)
testing <- testing[c(1:4), ]
testing[!testing==0]<-NULL
testing[!testing==0]<-NA
testing[testing==0]<-NA
testing$TotalIntenCh2<-c(23, 50,57,NA)
testing$FiberWidthCh1<-c(10,10,8,8)
testing$PerimStatusCh1<-c(2,NA,NA,2)
testing$VarIntenCh4<-c(NA,100,100,100)
predict(cart,newdata=testing)
testing
predict(cart,newdata=testing)
predict(cart,newdata=testing,na.action=na.omit)
str(testing)
predict(cart,newdata=testing,type="factor",na.action=na.omit)
predict(cart,newdata=testing,type="vector",na.action=na.omit)
predict(cart,newdata=testing,type="Class",na.action=na.omit)
predict(cart,newdata=testing,type="class",na.action=na.omit)
predict(cart,newdata=testing)
cart<-train(Class~.,data=training,method="rpart")
print(cart$finalModel)
fancyRpartPlot(cart$finalModel)
install.packages("rpart.plot")
library(rpart.plot)
fancyRpartPlot(cart$finalModel)
print(cart$finalModel)
predict(cart,newdata=testing)
predict(cart,newdata=testing,type="class")
cart<-rpart(Class~.,data=training)
predict(cart,newdata=testing,type="class")
ls<-predict(cart,newdata=testing)
ls
?rpart
cart<-train(Class~.,data=training,method="rpart")
predict(cart,newdata=testing,type="class")
predict(cart,newdata=testing,type="raw")
cart
summary(cart$finalMode)
summary(cart$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
?pgmm
str(olive)
summary(olive)
newdata = as.data.frame(t(colMeans(olive)))
fit<-train(Area~.,data=olive,method="rpart")
predict(fit,newdata=newdata,type="raw")
library(ElemStatLearn)
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
head(trainSA)
?train
fit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial")
fit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass
missClass(training)
test1<-predict(fit2,trainSA)
test1
fit2<-train(factor(chd)~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
test1<-predict(fit2,trainSA)
test1
missClass(training$chd,test1)
fit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
test1<-predict(fit2,trainSA)
missClass(training$chd,test1)
trainSA$chd
test1
sets.seed(13234)
fit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
set.seed(13234)
fit2<-train(chd~age+alcohol+obesity+tobacco+typea+ldl,data=trainSA,method="glm",family="binomial")
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
test1<-predict(fit2,trainSA)
missClass(trainSA$chd,test1)
test2<-predict(fit2,testSA)
missClass(testSA$chd,test2)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
str(vowel.train)
vowel.test$y<-factor(vowel.test$y)
vowel.train$y<-factor(vowel.train$y)
str(vowel.train)
set.seed(33833)
modfit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
library(caret)
modfit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
modfit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
?varImp
varImp(modfit)
summary(modfit)
print(modfit$finalModel)
str(vowel.train)
set.seed(33833)
modfit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
varImp(modfit)
summary(varImp(modfit))
?varImp
varImp.randomForest(modfit)
varImp.RandomForest(modfit)
modfit<-train(y~.,data=vowel.test,method="rf",prox=TRUE)
set.seed(33833)
modfit<-train(y~.,data=vowel.test,method="rf",prox=TRUE)
voweltotal<-rbind(vowel.test,vowel.train)
set.seed(33833)
modfit<-train(y~.,data=voweltotal,method="rf",prox=TRUE)
varImp(modfit)
set.seed(33833)
modfit<-train(y~.,data=vowel.train,method="rf",prox=TRUE)
varImp(modfit)
set.seed(33833)
modfit1<-train(y~.,data=vowel.test,method="rf",prox=TRUE)
varImp(modfit1)
set.seed(33833)
modfit2<-train(y~.,data=voweltotal,method="rf",prox=TRUE)
varImp(modfit2)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
fit1<-train(diagnosis~.,data=training,method="rf",prox=TRUE)
set.seed(62433)
fit2<-train(diagnosis~.,data=training,method="gbm")
set.seed(62433)
fit3<-train(diagnosis~.,training,method="lda")
pred1<-predict(fit1,testing)
pred2<-predict(fit2,testing)
pred3<-predict(fit3,testing)
preddf<-data.frame(pred1,pred2,pred3,testing$diagnosis)
combmodfit<-train(testing.diagnosis~.,method="gam",data=preddf)
compred<-predict(combmodfit,preddf)
y<-length(compred)
x<-compred==preddf$testing.diagnosis
sum(x)/y
x3<-pred3==testing$diagnosis
sum(x3)/y
x2<-pred2==testing$diagnosis
sum(x2)/y
x1<-pred1==testing$diagnosis
sum(x1)/y
library(rpart)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
svmmodel<-svm(CompressiveStrength~.,data=training)
View(testing)
svmpred<-predict(svmmodel,testing[-9])
?rmse
error<-testing[,9]-svmpred
error2<-sqrt(sum(error^2)/length(error))
install.packages("devtools")
install.packages("Rtools")
install.packages("Rtools")
install.packages("Rtool")
install.packages("shiny")
install.packages("manipulate")
library(manipulate)
manipulate(plot(1:x)),x=slider(1:100)
manipulate(plot(1:x))
x=slider(1:100)
manipulate(plot(1:x));x=slider(1:100)
manipulate(plot(1:x),x=slider(1:100))
manipulate(plot(1:x),x=slider(1,100))
myHist<- function(mu){
hist(galton$child,col = "blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("MSE= ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74, step=0.5))
?galton
library(HistData)
install.packages("HistData")
library(HistData)
myHist<- function(mu){
hist(galton$child,col = "blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("MSE= ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74, step=0.5))
HistData::galton
?Galton
data(Galton)
myHist<- function(mu){
hist(galton$child,col = "blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("MSE= ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74, step=0.5))
myHist<- function(mu){
hist(Galton$child,col = "blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((Galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("MSE= ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74, step=0.5))
myHist<- function(mu){
hist(Galton$child,col = "blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=10)
mse<-mean((Galton$child-mu)^2)
text(63,150,paste("mu= ",mu))
text(63,140,paste("MSE= ", round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74, step=0.5))
1install.packages("rChart")
install.packages("rChart")
library(rChart)
require(Rtools)
install.packages("rChart")
require(Rtools)
require(Rtool)
require(rChart)
install.packages("rCharts")
library(rCharts)
require(rCharts)
require(rCharts)
require(devtools)
install_github('ramnathv/rCharts')
devtools::find_rtools
require("plotly")
library(manipulate)
myPlot <- function(s) {
plot(cars$dist - mean(cars$dist), cars$speed - mean(cars$speed))
abline(0, s)
}
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
data("airquality")
pac<-data("airquality")
pac<-data(airquality)
data("airquality")
dTable(airquality, sPaginationType = "full_numbers")
library(rCharts)
dTable(airquality, sPaginationType = "full_numbers")
shiny::runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
install.packages("UsingR")
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
qplot(y=mtcars$mpg,x=mtcars$wt)
qplot(y=mtcars$mpg,x=mtcars$am)
qplot(y=mtcars$mpg,x=mtcars$hp)
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
qplot(y=mtcars$mpg,x=mtcars$hp)
qplot(y=mtcars$mpg,x=mtcars$wt)
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
print(ui)
print(ui.R)
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
?ggplot
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
runApp('C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/Fitregression')
setwd("C:/Users/Bruger/PAC/Documents/R/data products/ShinyApp/New egfr")
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?boxplot
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
